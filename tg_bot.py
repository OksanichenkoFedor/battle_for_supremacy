import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from consts import HEX_COLORS, HEX_COLORS_NAMES, ADMIN_ID, HEX_COLORS_DICT

file = open("token.txt")
token = file.read().replace("\n","")
file.close()

bot = telebot.TeleBot(token, parse_mode=None)
ids_colors = {}


COLOR_DATA = {
    '–ö—Ä–∞—Å–Ω—ã–π': {'emoj':'üî¥'},
    '–°–∞–ª–∞—Ç–æ–≤—ã–π': {'emoj':'üü¢'},
    '–°–∏–Ω–∏–π': {'emoj':'üîµ'},
    '–ñ—ë–ª—Ç—ã–π': {'emoj':'üü°'},
    '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π': {'emoj':'üü£'},
    '–ë–∏—Ä—é–∑–æ–≤—ã–π': {'emoj':'üß™'}
}

id_to_color = {}
colors_used = []



def create_color_keyboard():
    markup = InlineKeyboardMarkup()
    markup.row_width = 2  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ

    buttons = []
    for i in range(len(HEX_COLORS)):
        color_text = HEX_COLORS_NAMES[i] + " " + COLOR_DATA[HEX_COLORS_NAMES[i]]["emoj"]
        buttons.append(InlineKeyboardButton(color_text, callback_data=f"color_{i}"))

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–ø–æ 2 –≤ –∫–∞–∂–¥–æ–π)
    for i in range(0, len(buttons), 2):
        if i + 1 < len(buttons):
            markup.add(buttons[i], buttons[i + 1])
        else:
            markup.add(buttons[i])

    return markup


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = """
    –í—ã–±–µ—Ä–µ—Ç–µ —Ü–≤–µ—Ç –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã

    –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤:
    """
    bot.send_message(
        message.chat.id,
        welcome_text,
        reply_markup=create_color_keyboard()
    )
    #print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def handle_color_selection(call):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ü–≤–µ—Ç–∞ –∏–∑ callback_data
    if call.data.startswith("color_"):
        color_index = int(call.data.split("_")[1])
        color_name = HEX_COLORS_NAMES[color_index]

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å
        """
        print(f"=== –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ ===")
        print(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {call.from_user.id}")
        print(f"–ò–º—è: {call.from_user.first_name}")
        print(f"–§–∞–º–∏–ª–∏—è: {call.from_user.last_name}")
        print(f"Username: @{call.from_user.username}")
        print(f"–ù–æ–º–µ—Ä –∫–Ω–æ–ø–∫–∏: {color_index}")
        print(f"–¶–≤–µ—Ç: {color_name}")
        print("=" * 30)
        """
        print("–ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É")
        if color_name in colors_used:
            bot.send_message(
                call.from_user.id,
                "–≠—Ç–æ—Ç —Ü–≤–µ—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω"
            )
            print("–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç @" + str(call.from_user.username))
        elif call.from_user.id in id_to_color:
            curr = COLOR_DATA[id_to_color[call.from_user.id]]
            bot.send_message(
                call.from_user.id,
                "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–í–∞—à —Ü–≤–µ—Ç:"+curr["emoj"]
            )
            print("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ @"+str(call.from_user.username))
        else:
            colors_used.append(color_name)
            name = ""
            try:
                name+=str(call.from_user.first_name)+" "
            except:
                pass

            try:
                name+=str(call.from_user.last_name)+" "
            except:
                pass

            COLOR_DATA[color_name]["id"] = call.from_user.id
            COLOR_DATA[color_name]["name"] = name
            COLOR_DATA[color_name]["user_name"] = "@"+call.from_user.username
            COLOR_DATA[color_name]["color"] = HEX_COLORS[color_index]
            COLOR_DATA[color_name]["num_in_arr"] = HEX_COLORS_DICT[color_name]
            id_to_color[call.from_user.id] = color_name
            print(COLOR_DATA[color_name])
            bot.send_message(
                call.from_user.id,
                "–í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–∞—à —Ü–≤–µ—Ç:" + COLOR_DATA[color_name]["emoj"]
            )
            for admin_name in ADMIN_ID:
                bot.send_message(
                    ADMIN_ID[admin_name],
                    f"–í—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç: {COLOR_DATA[color_name]["emoj"]}\n"
                    f"–ù–æ–º–µ—Ä –∫–Ω–æ–ø–∫–∏: {COLOR_DATA[color_name]["num_in_arr"]}\n"
                    f"ID –≤—ã–±—Ä–∞–≤—à–µ–≥–æ: {COLOR_DATA[color_name]["id"]}\n"
                    f"username –≤—ã–±—Ä–∞–≤—à–µ–≥–æ: {COLOR_DATA[color_name]["user_name"]}\n"
                    f"–§–∞–º–∏–ª–∏—è –ò–º—è –≤—ã–±—Ä–∞–≤—à–µ–≥–æ: {COLOR_DATA[color_name]["name"]}\n"
                )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
@bot.message_handler(content_types=['text'])
def handle_text_messages(message):
    if message.from_user.id in id_to_color:
        curr = COLOR_DATA[id_to_color[message.from_user.id]]
        for admin_name in ADMIN_ID:
            bot.send_message(
                ADMIN_ID[admin_name],
                "–ü–∏—à–µ—Ç: "+curr["emoj"]+"\n"+curr["name"]+"\n–¢–µ–∫—Å—Ç:\n"+
                message.text
            )
        print("---")
        print("–ü–∏—à–µ—Ç —é–∑–µ—Ä: "+curr["emoj"]+"\n"+curr["name"]+"\n–¢–µ–∫—Å—Ç:\n"+message.text)

    elif message.from_user.id in ADMIN_ID.values():
        for user_id in id_to_color:
            bot.send_message(
                user_id,
                message.text
            )
        for admin_name in ADMIN_ID:

            if ADMIN_ID[admin_name]!=message.from_user.id:
                bot.send_message(
                    ADMIN_ID[admin_name],
                    "–ü–∏—à–µ—Ç –∞–¥–º–∏–Ω \n–¢–µ–∫—Å—Ç:\n"+message.text
                )
        print("---")
        print("–ü–∏—à–µ—Ç –∞–¥–º–∏–Ω \n–¢–µ–∫—Å—Ç:\n" + message.text)
print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
bot.polling()